generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  DIRECTOR
  MANAGER
  EMPLOYEE
  NOT_ACTIVATE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum MessageType {
  TEXT_USER
  TEXT_AI_SUCCESS
  TEXT_AI_ERROR
  FILE
}

model User {
  id                 String            @id @default(uuid())
  email              String            @unique
  password           String
  lastName           String
  firstName          String
  role               Role
  profilePhoto       String            @default("uploads/user/user-1.png")
  assignedProjects   Project[]         @relation("AssignedUsers")
  assignedTasks      Task[]            @relation("UserTasks")
  messages           Message[]
  conversations      Conversation[]    @relation("ConversationAuthor")
  uploadedFiles      File[]
  deepResearchLogs   DeepResearchLog[]
  invitationAccepted Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  Task               Task[]
}

model Project {
  id            String         @id @default(uuid())
  name          String
  description   String?        @default("Le projet consiste en ...") @db.VarChar(5000)
  srcBackground String         @default("uploads/projects/back-1.jpg")
  assignedUsers User[]         @relation("AssignedUsers")
  files         File[]
  conversations Conversation[]
  tasks         Task[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Task {
  id            String     @id @default(uuid())
  title         String     @default("TÃ¢che sans titre")
  description   String?    @default("Vide") @db.VarChar(1000)
  status        TaskStatus
  projectId     String
  project       Project    @relation(fields: [projectId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  User          User?      @relation(fields: [userId], references: [id])
  userId        String?
  assignedUsers User[]     @relation("UserTasks")
}

model File {
  id             String   @id @default(uuid())
  name           String
  url            String
  type           String
  content        String?
  uploadedById   String
  uploadedBy     User     @relation(fields: [uploadedById], references: [id])
  projectId      String?
  project        Project? @relation(fields: [projectId], references: [id])
  conversationId String?
  createdAt      DateTime @default(now())
  message        Message?
}

model Conversation {
  id        String    @id @default(uuid())
  title     String
  projectId String
  authorId  String
  project   Project   @relation(fields: [projectId], references: [id])
  author    User      @relation("ConversationAuthor", fields: [authorId], references: [id])
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id             String       @id @default(uuid())
  content        String       @db.VarChar(5000)
  type           MessageType
  conversationId String
  authorId       String?
  fileId         String?      @unique
  file           File?        @relation(fields: [fileId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  author         User?        @relation(fields: [authorId], references: [id])
  createdAt      DateTime     @default(now())
}

model DeepResearchLog {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  date        DateTime @default(now())
  triggeredBy String
}
